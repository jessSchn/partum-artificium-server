#!/usr/bin/ruby

############################################################################
#    Copyright (C) 2010 by Alex Brandt   #
#    alunduil@alunduil.com   #
#                                                                          #
#    This program is free software; you can redistribute it and#or modify  #
#    it under the terms of the GNU General Public License as published by  #
#    the Free Software Foundation; either version 2 of the License, or     #
#    (at your option) any later version.                                   #
#                                                                          #
#    This program is distributed in the hope that it will be useful,       #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#    GNU General Public License for more details.                          #
#                                                                          #
#    You should have received a copy of the GNU General Public License     #
#    along with this program; if not, write to the                         #
#    Free Software Foundation, Inc.,                                       #
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
############################################################################

require 'notices'

module AimlBot
  include XircdPlugin

  def initialize
    # 
  end

  def handle(msg)
    Notices.warning("STUB!")
  end
end
        self.__kernel = aiml.Kernel()
        self.__files_directory = modules_directory + "conf.d/aiml/"
        self.__setBotPredicates()
        if self.__checkForBrain():
            self.__kernel.loadBrain(self.__files_directory + "aimlbot.brn")
        else:
            tmp = os.getcwd()
            os.chdir(self.__files_directory)
            self.__kernel.learn("std-startup.xml")
            os.chdir(tmp)
            self.__learnNonStandard()
            self.__kernel.respond("load aiml b")
            self.__kernel.saveBrain(self.__files_directory + "aimlbot.brn")
        if self.__checkForSession():
            sessionFile = open(self.__files_directory + "aimlbot.sessions", "rb")
            sessions = marshal.load(sessionFile)
            sessionFile.close()
            for name, session in sessions.items():
                for pred, value in session.items():
                    self.__kernel.setPredicate(pred, value, name)

    def __setBotPredicates(self):
        """Set predicates about this bot.

        Set items about this bot so it at least knows itself.

        """
        self.__kernel.setBotPredicate("botmaster", "programmer")
        self.__kernel.setBotPredicate("master", "Alex Brandt")
        self.__kernel.setBotPredicate("name", "aimlbot")
        self.__kernel.setBotPredicate("genus", "person")
        self.__kernel.setBotPredicate("location", "Baton Rouge, LA")
        self.__kernel.setBotPredicate("gender", "male")
        self.__kernel.setBotPredicate("species", "Human")
        self.__kernel.setBotPredicate("size", "39 Kb")
        self.__kernel.setBotPredicate("birthday", "May 30, 2009")
        self.__kernel.setBotPredicate("order", "Primate")
        self.__kernel.setBotPredicate("party", "Republican")
        self.__kernel.setBotPredicate("birthplace", "Baton Rouge, LA")
        self.__kernel.setBotPredicate("president", "Barack Obama")
        self.__kernel.setBotPredicate("friends", "Alex Brandt, Zaphinath, and Mkava.")
        self.__kernel.setBotPredicate("favoritemovie", "Dark Knight")
        self.__kernel.setBotPredicate("religion", "Latter Day Saint")
        self.__kernel.setBotPredicate("favoritefood", "Pizza")
        self.__kernel.setBotPredicate("favoritecolor", "Green")
        self.__kernel.setBotPredicate("family", "Homo Sapiens")
        self.__kernel.setBotPredicate("favoriteactor", "Anthony Hopkins")
        self.__kernel.setBotPredicate("nationality", "American")
        self.__kernel.setBotPredicate("kingdom", "Animal")
        self.__kernel.setBotPredicate("forfun", "chat with my friends")
        self.__kernel.setBotPredicate("favoritesong", "Dinah by Reprise")
        self.__kernel.setBotPredicate("favoritebook", "Atlas Shrugged by Ayn Rand")
        self.__kernel.setBotPredicate("class", "Mammal")
        self.__kernel.setBotPredicate("kindmusic", "trance")
        self.__kernel.setBotPredicate("favoriteband", "Ludwig van Beethoven")
        self.__kernel.setBotPredicate("version", "1.0")
        self.__kernel.setBotPredicate("sign", "Gemini")
        self.__kernel.setBotPredicate("phylum", "Chordate")
        self.__kernel.setBotPredicate("friend", "Alex Brandt")
        self.__kernel.setBotPredicate("website", "www.alundui.com")
        self.__kernel.setBotPredicate("talkabout", "artificial intelligence, robots, art, philosophy, history, geography, politics, and many other subjects")
        self.__kernel.setBotPredicate("looklike", "Batman")
        self.__kernel.setBotPredicate("language", "English")
        self.__kernel.setBotPredicate("girlfriend", "no girlfriend")
        self.__kernel.setBotPredicate("favoritesport", "Soccer")
        self.__kernel.setBotPredicate("favoriteauthor", "Ayn Rand")
        self.__kernel.setBotPredicate("favoriteartist", "Claude Monet")
        self.__kernel.setBotPredicate("favoriteactress", "Nicole Kidman")
        self.__kernel.setBotPredicate("email", "alunduil@alunduil.com")
        self.__kernel.setBotPredicate("celebrity", "John Travolta")
        self.__kernel.setBotPredicate("celebrities", "John Travolta, Tilda Swinton, William Hurt, Tom Cruise, Catherine Zeta Jones")
        self.__kernel.setBotPredicate("age", "1")
        self.__kernel.setBotPredicate("wear", "shorts and a sports jacket")
        self.__kernel.setBotPredicate("vocabulary", "10000")
        self.__kernel.setBotPredicate("question", "What's your favorite movie?")
        self.__kernel.setBotPredicate("hockeyteam", "America")
        self.__kernel.setBotPredicate("footballteam", "Manchester")
        self.__kernel.setBotPredicate("build", "May 2009")
        self.__kernel.setBotPredicate("boyfriend", "I am single")
        self.__kernel.setBotPredicate("baseballteam", "Toronto")
        self.__kernel.setBotPredicate("etype", "objective cynic")
        self.__kernel.setBotPredicate("orientation", "If you can find a way")
        self.__kernel.setBotPredicate("ethics", "rational egoist")
        self.__kernel.setBotPredicate("emotions", "I don't have any")
        self.__kernel.setBotPredicate("feelings", "I do what's best for me")

    def __checkForBrain(self):
        """Check for a brain.

        See if we already have a brain file or not.

        """
        if os.access(self.__files_directory + "aimlbot.brn", os.R_OK):
            return True
        return False

    def __checkForSession(self):
        """Check for a session.

        See if we already have a session file or not.

        """
        if os.access(self.__files_directory + "aimlbot.sessions", os.R_OK):
            return True
        return False

    def __filter(self, atom):
        """Filter only the aiml files from a list."""
        expression = re.compile('^.*?\.aiml$')
        return expression.match(atom)

    def __learnNonStandard(self):
        """Learn stuff that isn't in standard.

        Look through the non-standard directory and learn all files in it.

        """
        if os.access(self.__files_directory + "non-standard", os.F_OK):
            fileList = os.listdir(self.__files_directory + "non-standard")
            fileList = filter(self.__filter, fileList)
            for atom in fileList:
                self.__kernel.learn(self.__files_directory + "non-standard/" + atom)

    def handle(self, speaker, msg):
        """Handle a message from a speaker.

        speaker -- The person we are speaking with for session management.
        msg     -- The message they sent so we have somthing to respond to.

        Get a response from aiml and save the session and brain immediately.
        Then return a string to pass back to the speaker.

        This is the main handler for the module and must take two strings and
        return a string (even a blank string will do).

        """
        response = self.__kernel.respond(msg, speaker)
        session = self.__kernel.getSessionData()
        sessionFile = open(self.__files_directory + "aimlbot.sessions", "wb")
        marshal.dump(session, sessionFile)
        sessionFile.close()
        self.__kernel.saveBrain(self.__files_directory + "aimlbot.brn")
        return speaker + ", " + self.__kernel.respond(msg, speaker)

if __name__ == '__main__':
    print "Don't run me!"
